schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
enum AuthProvider {
  apiKey
  iam
  oidc
  userPool
}
enum AuthAction {
  create
  read
  update
  delete
}
input AuthRule {
  provider: AuthProvider!
  action: String
  conditions: [AWSJSON]
}
input FindCursorProps {
  consistentRead: Boolean
  returnConsumedCapacity: String
}
input FindOneProps {
  consistentRead: Boolean
  returnConsumedCapacity: String
}
input InsertOneProps {
  returnValues: String
  returnConsumedCapacity: String
}
input UpdateOneProps {
  returnValues: String
  returnConsumedCapacity: String
}
input DeleteOneProps {
  returnValues: String
  returnConsumedCapacity: String
  returnItemCollectionMetrics: String
}
interface MNode {
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
interface DNode {
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type MMovie implements MNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\",\"condition\":{\"$expr\":{\"$in\":{\"$$event.identity.username\":\"$owners\"}}}},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"mySql\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  boolean: Boolean
  float: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  json: AWSJSON
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  @source(value: "{\"name\":\"sourceField\"}")
  owners: [String]
  mMovieActors: [MMovieActor]!
  @lookup(value: "{\"from\":\"MMovieActor\",\"localField\":\"id\",\"foreignField\":\"movieId\"}")
  poster: MFile
  @lookup(value: "{\"from\":\"MFile\",\"let\":{\"myMovieId\":\"$id\"},\"pipeline\":[{\"$match\":{\"$expr\":{\"$and\":[{\"$eq\":[\"$entityName\",\"MMovie\"]},{\"$eq\":[\"$entityId\",\"$$myMovieId\"]},{\"$eq\":[\"$entityKey\",\"poster\"]}]}}}]}")
  clicks: DMovieAnalytics
  @lookup(value: "{\"from\":\"DMovieAnalytics\",\"let\":{\"myMovieId\":\"$id\"},\"pipeline\":[{\"$match\":{\"$expr\":{\"$and\":[{\"$eq\":[\"$movieId\",\"$$myMovieId\"]},{\"$eq\":[\"$action\",\"click\"]}]}}}]}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MMovieEdge @aws_iam @aws_cognito_user_pools {
  node: MMovie
}
type MMovieConnection @aws_iam @aws_cognito_user_pools {
  edges: [MMovieEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
type Query {
  mMovieFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MMovieConnection
  @aws_iam @aws_cognito_user_pools
  mMovieFindOne(filter: AWSJSON props: FindOneProps): MMovie
  @aws_iam @aws_cognito_user_pools
  mMovieActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MMovieActorConnection
  @aws_iam @aws_cognito_user_pools
  mMovieActorFindOne(filter: AWSJSON props: FindOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools
  mActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MActorConnection
  @aws_iam @aws_cognito_user_pools
  mActorFindOne(filter: AWSJSON props: FindOneProps): MActor
  @aws_iam @aws_cognito_user_pools
  mFileFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MFileConnection
  @aws_iam @aws_cognito_user_pools
  mFileFindOne(filter: AWSJSON props: FindOneProps): MFile
  @aws_iam @aws_cognito_user_pools
  dMovieFindCursor(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): DMovieCursorConnection
  @aws_iam @aws_cognito_user_pools @aws_api_key
  dMovieFindOne(filter: AWSJSON props: FindOneProps): DMovie
  @aws_iam @aws_cognito_user_pools @aws_api_key
  dMovieIndexFindCursor(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): DMovieIndexCursorConnection
  @aws_iam @aws_cognito_user_pools
  dMovieActorFindCursor(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): DMovieActorCursorConnection
  @aws_iam @aws_cognito_user_pools
  dMovieActorFindOne(filter: AWSJSON props: FindOneProps): DMovieActor
  @aws_iam @aws_cognito_user_pools
  dActorFindCursor(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): DActorCursorConnection
  @aws_iam @aws_cognito_user_pools
  dActorFindOne(filter: AWSJSON props: FindOneProps): DActor
  @aws_iam @aws_cognito_user_pools
  dMovieAnalyticsFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): DMovieAnalyticsConnection
  @aws_iam @aws_cognito_user_pools
  dMovieAnalyticsFindOne(filter: AWSJSON props: FindOneProps): DMovieAnalytics
  @aws_iam @aws_cognito_user_pools
}
input MMovieInput {
  name: String
  boolean: Boolean
  float: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  json: AWSJSON
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  owners: [String]
}
type Mutation {
  mMovieInsertOne(insert: MMovieInput! filter: AWSJSON props: InsertOneProps): MMovie
  @aws_iam @aws_cognito_user_pools
  mMovieUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MMovie
  @aws_iam @aws_cognito_user_pools
  mMovieDeleteOne(filter: AWSJSON props: DeleteOneProps): MMovie
  @aws_iam @aws_cognito_user_pools
  mMovieActorInsertOne(insert: MMovieActorInput! filter: AWSJSON props: InsertOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools
  mMovieActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools
  mMovieActorDeleteOne(filter: AWSJSON props: DeleteOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools
  mActorInsertOne(insert: MActorInput! filter: AWSJSON props: InsertOneProps): MActor
  @aws_iam @aws_cognito_user_pools
  mActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MActor
  @aws_iam @aws_cognito_user_pools
  mActorDeleteOne(filter: AWSJSON props: DeleteOneProps): MActor
  @aws_iam @aws_cognito_user_pools
  mFileInsertOne(insert: MFileInput! filter: AWSJSON props: InsertOneProps): MFile
  @aws_iam @aws_cognito_user_pools
  mFileUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MFile
  @aws_iam @aws_cognito_user_pools
  mFileDeleteOne(filter: AWSJSON props: DeleteOneProps): MFile
  @aws_iam @aws_cognito_user_pools
  dMovieInsertOne(insert: DMovieInput! filter: AWSJSON props: InsertOneProps): DMovie
  @aws_iam @aws_cognito_user_pools @aws_api_key
  dMovieUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): DMovie
  @aws_iam @aws_cognito_user_pools @aws_api_key
  dMovieDeleteOne(filter: AWSJSON props: DeleteOneProps): DMovie
  @aws_iam @aws_cognito_user_pools @aws_api_key
  dMovieActorInsertOne(insert: DMovieActorInput! filter: AWSJSON props: InsertOneProps): DMovieActor
  @aws_iam @aws_cognito_user_pools
  dMovieActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): DMovieActor
  @aws_iam @aws_cognito_user_pools
  dMovieActorDeleteOne(filter: AWSJSON props: DeleteOneProps): DMovieActor
  @aws_iam @aws_cognito_user_pools
  dActorInsertOne(insert: DActorInput! filter: AWSJSON props: InsertOneProps): DActor
  @aws_iam @aws_cognito_user_pools
  dActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): DActor
  @aws_iam @aws_cognito_user_pools
  dActorDeleteOne(filter: AWSJSON props: DeleteOneProps): DActor
  @aws_iam @aws_cognito_user_pools
  mPostFindExample(input: MPostFindExampleInput!): MPostFindExampleOutput
  @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}")
  mPostQueryExample(input: MPostQueryExampleInput!): MPostQueryExampleOutput
  @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}")
}
type MMovieActor implements MNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"mySql\"}") @source(value: "{\"name\":\"movieActor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  movieId: ID
  actorId: ID
  mMovie: MMovie
  @lookup(value: "{\"from\":\"MMovie\",\"localField\":\"movieId\",\"foreignField\":\"id\"}")
  mActor: MActor
  @lookup(value: "{\"from\":\"MActor\",\"localField\":\"actorId\",\"foreignField\":\"id\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MMovieActorEdge @aws_iam @aws_cognito_user_pools {
  node: MMovieActor
}
type MMovieActorConnection @aws_iam @aws_cognito_user_pools {
  edges: [MMovieActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MMovieActorInput {
  movieId: ID
  actorId: ID
}
type MActor implements MNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"mySql\"}") @source(value: "{\"name\":\"actor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  mMovieActors: [MMovieActor]
  @lookup(value: "{\"from\":\"MMovieActor\",\"localField\":\"id\",\"foreignField\":\"actorId\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MActorEdge @aws_iam @aws_cognito_user_pools {
  node: MActor
}
type MActorConnection @aws_iam @aws_cognito_user_pools {
  edges: [MActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MActorInput {
  name: String
}
type MFile implements MNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"mySql\"}") @source(value: "{\"name\":\"file\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  entityName: String
  entityId: String
  entityKey: String
  filename: String
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MFileEdge @aws_iam @aws_cognito_user_pools {
  node: MFile
}
type MFileConnection @aws_iam @aws_cognito_user_pools {
  edges: [MFileEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MFileInput {
  entityName: String
  entityId: String
  entityKey: String
  filename: String
}
type DMovieAttributes {
  attribute1: String
  attribute2: String
  attribute3: Int
  attribute4: [String]
  attribute5: [String]
  @set(value: "{\"dataType\":\"string\"}")
}
type DMovie implements DNode @aws_iam @aws_cognito_user_pools @aws_api_key @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}},{\"provider\":\"apiKey\"}]}") @datasource(value: "{\"id\":\"dynamoDb\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"findCursor\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  @aws_iam @aws_api_key @auth(value: "{\"rules\":[{\"provider\":\"iam\",\"condition\":{\"$in\":{\"$$event.identity.username\":\"$owners\"}}},{\"provider\":\"apiKey\"}]}")
  boolean: Boolean
  float: Float
  decimal: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  @source(value: "{\"name\":\"source\"}")
  list: [String]
  attributes: DMovieAttributes
  owners: [String]
  @set(value: "{\"dataType\":\"string\"}")
  groups: [String]
  @set(value: "{\"dataType\":\"string\"}")
  dMovieActors(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): [DMovieActor]!
  @lookup(value: "{\"from\":\"DMovieActor\",\"localField\":\"id\",\"foreignField\":\"movieId\"}")
  poster: MFile
  @lookup(value: "{\"from\":\"MFile\",\"let\":{\"myMovieId\":\"$id\"},\"pipeline\":[{\"$match\":{\"$expr\":{\"$and\":[{\"$eq\":[\"$entityName\",\"MMovie\"]},{\"$eq\":[\"$entityId\",\"$$myMovieId\"]},{\"$eq\":[\"$entityKey\",\"poster\"]}]}}}]}")
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieCursorEdge @aws_iam @aws_cognito_user_pools @aws_api_key {
  cursor: String
  node: DMovie
}
type DMovieCursorConnection @aws_iam @aws_cognito_user_pools @aws_api_key {
  edges: [DMovieCursorEdge]
  pageInfo: PageInfoCursor!
  totalCount: Int
}
input DMovieAttributesInput {
  attribute1: String
  attribute2: String
  attribute3: Int
  attribute4: [String]
  attribute5: [String]
}
input DMovieInput {
  name: String
  boolean: Boolean
  float: Float
  decimal: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  list: [String]
  attributes: DMovieAttributesInput
  owners: [String]
  groups: [String]
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieIndex implements DNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"dynamoDb\"}") @source(value: "{\"name\":\"movie\"}") @secondaryIndex(value: "{\"name\":\"movieIndex\"}") @operation(value: "{\"names\":[\"findCursor\"]}") {
  name: String!
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieIndexCursorEdge @aws_iam @aws_cognito_user_pools {
  cursor: String
  node: DMovieIndex
}
type DMovieIndexCursorConnection @aws_iam @aws_cognito_user_pools {
  edges: [DMovieIndexCursorEdge]
  pageInfo: PageInfoCursor!
  totalCount: Int
}
type DMovieActor implements DNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"dynamoDb\"}") @source(value: "{\"name\":\"movieActor\"}") @operation(value: "{\"names\":[\"findCursor\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  movieId: ID
  actorId: ID
  dMovie: DMovie
  @lookup(value: "{\"from\":\"DMovie\",\"localField\":\"movieId\",\"foreignField\":\"id\"}")
  dActor: DActor
  @lookup(value: "{\"from\":\"DActor\",\"localField\":\"actorId\",\"foreignField\":\"id\"}")
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieActorCursorEdge @aws_iam @aws_cognito_user_pools {
  cursor: String
  node: DMovieActor
}
type DMovieActorCursorConnection @aws_iam @aws_cognito_user_pools {
  edges: [DMovieActorCursorEdge]
  pageInfo: PageInfoCursor!
  totalCount: Int
}
input DMovieActorInput {
  movieId: ID
  actorId: ID
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DActor implements DNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"dynamoDb\"}") @source(value: "{\"name\":\"actor\"}") @operation(value: "{\"names\":[\"findCursor\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  dMovieActors(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): [DMovieActor]
  @lookup(value: "{\"from\":\"DMovieActor\",\"localField\":\"id\",\"foreignField\":\"actorId\"}")
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DActorCursorEdge @aws_iam @aws_cognito_user_pools {
  cursor: String
  node: DActor
}
type DActorCursorConnection @aws_iam @aws_cognito_user_pools {
  edges: [DActorCursorEdge]
  pageInfo: PageInfoCursor!
  totalCount: Int
}
input DActorInput {
  name: String
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieAnalytics implements DNode @aws_iam @aws_cognito_user_pools @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}}]}") @datasource(value: "{\"id\":\"dynamoDb\"}") @source(value: "{\"name\":\"analytics\"}") @operation(value: "{\"names\":[\"find\",\"findOne\"]}") {
  movieId: ID!
  timeStamp: AWSTimestamp!
  action: String
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieAnalyticsEdge @aws_iam @aws_cognito_user_pools {
  node: DMovieAnalytics
}
type DMovieAnalyticsConnection @aws_iam @aws_cognito_user_pools {
  edges: [DMovieAnalyticsEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
type PageInfoCursor @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}},{\"provider\":\"apiKey\"}]}") {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}
type PageInfoOffset @auth(value: "{\"rules\":[{\"provider\":\"iam\"},{\"provider\":\"userPool\",\"props\":{\"groups\":[\"*\"]}},{\"provider\":\"apiKey\"}]}") {
  skip: Int!
  limit: Int!
}
input MPostFindExampleInput {
  number1: Int!
}
type MPostFindExampleOutput @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}") {
  id: ID
  @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}")
}
input MPostQueryExampleTestInput {
  number1: Int!
}
input MPostQueryExampleInput {
  number1: Int!
  test: MPostQueryExampleTestInput
}
type MPostQueryExampleTestTestOutput @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}") {
  result1: Int!
  result2: Int!
}
type MPostQueryExampleTestOutput @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}") {
  result1: Int!
  result2: Int!
  test: MPostQueryExampleTestTestOutput
}
type MPostQueryExampleOutput @auth(value: "{\"rules\":[{\"provider\":\"iam\"}]}") {
  id: ID
  test: MPostQueryExampleTestOutput
}
type Subscription {
  dMovieUpdated: DMovie
  @aws_subscribe(mutations: ["dMovieUpdateOne"])
}

scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress

directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(cognito_groups: String) on FIELD_DEFINITION | OBJECT
directive @aws_api_key on FIELD_DEFINITION | OBJECT
directive @aws_oidc on FIELD_DEFINITION | OBJECT
directive @aws_lambda on FIELD_DEFINITION | OBJECT
directive @aws_lambda on FIELD_DEFINITION | OBJECT
directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION
directive @auth(value: AWSJSON) on FIELD_DEFINITION | OBJECT
directive @datasource(value: AWSJSON) on FIELD_DEFINITION | OBJECT
directive @lookup(value: AWSJSON) on FIELD_DEFINITION
directive @operation(value: AWSJSON) on OBJECT
directive @partitionKey(value: AWSJSON) on FIELD_DEFINITION
directive @readonly(value: AWSJSON) on FIELD_DEFINITION
directive @secondaryIndex(value: AWSJSON) on OBJECT
directive @set(value: AWSJSON) on FIELD_DEFINITION
directive @sortKey(value: AWSJSON) on FIELD_DEFINITION
directive @source(value: AWSJSON) on FIELD_DEFINITION | OBJECT

directive @tag(value: AWSJSON) on FIELD_DEFINITION | OBJECT