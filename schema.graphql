schema {
  query: Query
  mutation: Mutation
}

enum AuthStrategy {
  private
  public
  owners
  groups
  custom
}

enum AuthProvider {
  apiKey
  iam
  oidc
  userPools
  function
}

enum AuthOperation {
  find
  findOne
  insertOne
  insertMany
  updateOne
  updateMany
  upsertOne
  upsertMany
  deleteOne
  deleteMany
}

input AuthRule {
  allow: AuthStrategy!
  provider: AuthProvider!
  ownerField: String
  identityClaim: String
  groupsField: String
  groupClaim: String
  groups: [String]
  operations: [AuthOperation]
}

interface MNode @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") {
  id: ID! @readonly(value: "true")
  createdAt: AWSDateTime! @readonly(value: "true")
  createdBy: AWSDateTime! @readonly(value: "true")
  updatedAt: AWSDateTime! @readonly(value: "true")
  updatedBy: AWSDateTime! @readonly(value: "true")
}

type MMovie implements MNode @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") @datasource(name: "mySql") @source(name: "pilot") @operations(names: "find,findOne,insertOne,insertMany,updateOne,updateMany,upsertOne,upsertMany,deleteOne,deleteMany") {
  name: String!
  exampleBoolean: Boolean
  exampleFloat: Float
  exampleInt: Int
  exampleDate: AWSDate
  exampleDateTime: AWSDateTime
  exampleEmail: AWSEmail
  exampleIpAddress: AWSIPAddress
  exampleJson: AWSJSON
  examplePhone: AWSPhone
  exampleTime: AWSTime
  exampleTimestamp: AWSTimestamp
  exampleUrl: AWSURL
  exampleSourceField: String @source(name: "sourceField")
  mMovieActors: [MMovieActor]! @lookup(from: "MMovieActor", localField: "id", foreignField: "movieId")
  id: ID! @readonly(value: "true")
  createdAt: AWSDateTime! @readonly(value: "true")
  createdBy: AWSDateTime! @readonly(value: "true")
  updatedAt: AWSDateTime! @readonly(value: "true")
  updatedBy: AWSDateTime! @readonly(value: "true")
}

type MMovieEdge {
  node: MMovie
}

type MMovieConnection {
  edges: [MMovieEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}

type Query {
  mMovieFind(filter: String, sort: String, skip: Int, limit: Int): MMovieConnection
  mMovieActorFind(filter: String, sort: String, skip: Int, limit: Int): MMovieActorConnection
  mActorFind(filter: String, sort: String, skip: Int, limit: Int): MActorConnection
}

type MMovieActor implements MNode @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") @datasource(name: "mySql") @source(name: "movieActor") @operations(names: "find,findOne,insertOne,insertMany,updateOne,updateMany,upsertOne,upsertMany,deleteOne,deleteMany") {
  movieId: ID!
  actorId: ID!
  mMovie: MMovie! @lookup(from: "MMovie", localField: "movieId", foreignField: "id")
  mActor: MMovie! @lookup(from: "MActor", localField: "actorId", foreignField: "id")
  id: ID! @readonly(value: "true")
  createdAt: AWSDateTime! @readonly(value: "true")
  createdBy: AWSDateTime! @readonly(value: "true")
  updatedAt: AWSDateTime! @readonly(value: "true")
  updatedBy: AWSDateTime! @readonly(value: "true")
}

type MMovieActorEdge {
  node: MMovieActor
}

type MMovieActorConnection {
  edges: [MMovieActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}

type MActor implements MNode @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") @datasource(name: "mySql") @source(name: "comment") @operations(names: "find,findOne,insertOne,insertMany,updateOne,updateMany,upsertOne,upsertMany,deleteOne,deleteMany") {
  name: String!
  mMovieActors: [MMovieActor] @lookup(from: "MMovieActor", localField: "id", foreignField: "actorId")
  id: ID! @readonly(value: "true")
  createdAt: AWSDateTime! @readonly(value: "true")
  createdBy: AWSDateTime! @readonly(value: "true")
  updatedAt: AWSDateTime! @readonly(value: "true")
  updatedBy: AWSDateTime! @readonly(value: "true")
}

type MActorEdge {
  node: MActor
}

type MActorConnection {
  edges: [MActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}

type PageInfoCursor @aws_iam @aws_cognito_user_pools {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type PageInfoOffset @aws_iam @aws_cognito_user_pools {
  skip: Int!
  limit: Int!
}

input MPostFindExampleInput {
  number1: Int!
}

type MPostFindExampleOutput @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") {
  id: ID @auth(rules: "[{\"allow\":\"owner\",\"provider\":\"iam\"}]")
}

type Mutation {
  mPostFindExample(input: MPostFindExampleInput!): MPostFindExampleOutput @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]")
  mPostQueryExample(input: MPostQueryExampleInput!): MPostQueryExampleOutput @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]")
}

input MPostQueryExampleTestInput {
  number1: Int!
}

input MPostQueryExampleInput {
  number1: Int!
  test: MPostQueryExampleTestInput
}

type MPostQueryExampleTestTestOutput @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") {
  result1: Int!
  result2: Int!
}

type MPostQueryExampleTestOutput @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") {
  result1: Int!
  result2: Int!
  test: MPostQueryExampleTestTestOutput
}

type MPostQueryExampleOutput @auth(rules: "[{\"allow\":\"private\",\"provider\":\"iam\"}]") {
  id: ID
  test: MPostQueryExampleTestOutput
}

scalar AWSDate

scalar AWSTime

scalar AWSDateTime

scalar AWSTimestamp

scalar AWSEmail

scalar AWSJSON

scalar AWSURL

scalar AWSPhone

scalar AWSIPAddress

directive @aws_iam on FIELD_DEFINITION | OBJECT

directive @aws_cognito_user_pools(cognito_groups: String) on FIELD_DEFINITION | OBJECT

directive @auth(rules: [AuthRule!]!) on OBJECT | INTERFACE | FIELD_DEFINITION

directive @datasource(name: String) on FIELD_DEFINITION | OBJECT

directive @lookup(from: String!, localField: String!, foreignField: String!) on FIELD_DEFINITION

directive @operations(names: [String!]!) on OBJECT

directive @pagination(type: String) on OBJECT

directive @readonly(value: String) on FIELD_DEFINITION

directive @source(name: String) on FIELD_DEFINITION | OBJECT