schema {
  query: Query
  mutation: Mutation
}

directive @datasource(name: String) on OBJECT

directive @source(name: String) on FIELD_DEFINITION | OBJECT

directive @lookup(from: String, localField: String, foreignField: String) on FIELD_DEFINITION

directive @readonly(value: String) on FIELD_DEFINITION

directive @operations(names: [String]) on OBJECT

input MpostBusinessGraphqlInput {
  number1: Int!
}

type MpostBusinessGraphqlPayload @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  id: String!
}

type MpostBusinessGraphqlOutput @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  output: MpostBusinessGraphqlPayload
}

type Mutation {
  mpostBusinessGraphql(input: MpostBusinessGraphqlInput!): MpostBusinessGraphqlOutput @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
}

input SortInput {
  fieldName: String!
  direction: Int!
}

interface MNode {
  id: ID! @readonly(value: "true")
  isDeleted: Boolean! @readonly(value: "true")
  dateCreated: AWSDateTime! @readonly(value: "true")
  dateUpdated: AWSDateTime! @readonly(value: "true")
}

type MPost implements MNode @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_iam @datasource(name: "mySql") @source(name: "post") @operations(names: "find,findOne,insertOne,insertMany,updateOne,updateMany,deleteOne,deleteMany,destroyOne,destoryMany") {
  date: AWSDateTime
  title: String @source(name: "title")
  mcomments: [MComment] @lookup(from: "MComment", localField: "id", foreignField: "mpostId")
  id: ID! @readonly(value: "true")
  isDeleted: Boolean! @readonly(value: "true")
  dateCreated: AWSDateTime! @readonly(value: "true")
  dateUpdated: AWSDateTime! @readonly(value: "true")
}

type MPostEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MPost
}

type MPostConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MPostEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}

type Query {
  mPostFind(filter: AWSJSON, sort: [SortInput], skip: Int, limit: Int): MPostConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mCommentFind(filter: AWSJSON, sort: [SortInput], skip: Int, limit: Int): MCommentConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
}

type MComment implements MNode @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_iam @datasource(name: "mySql") @source(name: "comment") @operations(names: "find,findOne,insertOne,insertMany,updateOne,updateMany,deleteOne,deleteMany,destroyOne,destoryMany") {
  id: ID! @readonly(value: "true")
  html: String @source(name: "content")
  mpostId: ID
  mpost: MPost @lookup(from: "MPost", localField: "mpostId", foreignField: "id")
  isDeleted: Boolean! @readonly(value: "true")
  dateCreated: AWSDateTime! @readonly(value: "true")
  dateUpdated: AWSDateTime! @readonly(value: "true")
}

type MCommentEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MComment
}

type MCommentConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MCommentEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}

type PageInfoOffset @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  skip: Int!
  limit: Int!
}

type PageInfoCursor @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar AWSDate

scalar AWSTime

scalar AWSDateTime

scalar AWSTimestamp

scalar AWSEmail

scalar AWSJSON

scalar AWSURL

scalar AWSPhone

scalar AWSIPAddress

directive @aws_iam on FIELD_DEFINITION | OBJECT

directive @aws_cognito_user_pools(cognito_groups: String) on FIELD_DEFINITION | OBJECT