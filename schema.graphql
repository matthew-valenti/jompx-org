schema {
  query: Query
  mutation: Mutation
}
enum AuthStrategy {
  private
  public
  owners
  groups
  custom
}
enum AuthProvider {
  apiKey
  iam
  oidc
  userPool
  function
}
enum AuthOperation {
  find
  findOne
  insertOne
  insertMany
  updateOne
  updateMany
  upsertOne
  upsertMany
  deleteOne
  deleteMany
}
input AuthRule {
  allow: AuthStrategy!
  provider: AuthProvider!
  ownersField: String
  ownerClaim: String
  groupsField: String
  groupClaim: String
  groups: [String]
  operations: [AuthOperation]
}
interface MNode {
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
interface DNode {
  id: ID!
  @partitionKey(value: "{\"isPartitionKey\":true}")
  createdAt: AWSDateTime!
  createdBy: AWSDateTime!
  updatedAt: AWSDateTime!
  updatedBy: AWSDateTime!
}
type MMovie implements MNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"mySql\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String!
  boolean: Boolean
  float: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  json: AWSJSON
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  @source(value: "{\"name\":\"sourceField\"}")
  mMovieActors: [MMovieActor]!
  @lookup(value: "{\"from\":\"MMovieActor\",\"localField\":\"id\",\"foreignField\":\"movieId\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MMovieEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MMovie
}
type MMovieConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MMovieEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
type Query {
  mMovieFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MMovieConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieFindOne(filter: AWSJSON props: MMovieProps): MMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MMovieActorConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieActorFindOne(filter: AWSJSON props: MMovieActorProps): MMovieActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MActorConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mActorFindOne(filter: AWSJSON props: MActorProps): MActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieFindOne(filter: AWSJSON props: DMovieProps): DMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): DMovieActorConnection
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieActorFindOne(filter: AWSJSON props: DMovieActorProps): DMovieActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): DActorConnection
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dActorFindOne(filter: AWSJSON props: DActorProps): DActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
}
input MMovieProps {
  consistentRead: Boolean
  returnConsumedCapacity: Boolean
}
type MMovieActor implements MNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"mySql\"}") @source(value: "{\"name\":\"movieActor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  movieId: ID!
  actorId: ID!
  mMovie: MMovie!
  @lookup(value: "{\"from\":\"MMovie\",\"localField\":\"movieId\",\"foreignField\":\"id\"}")
  mActor: MActor!
  @lookup(value: "{\"from\":\"MActor\",\"localField\":\"actorId\",\"foreignField\":\"id\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MMovieActorEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MMovieActor
}
type MMovieActorConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MMovieActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MMovieActorProps {
  consistentRead: Boolean
  returnConsumedCapacity: Boolean
}
type MActor implements MNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"mySql\"}") @source(value: "{\"name\":\"actor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String!
  mMovieActors: [MMovieActor]
  @lookup(value: "{\"from\":\"MMovieActor\",\"localField\":\"id\",\"foreignField\":\"actorId\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MActorEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MActor
}
type MActorConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MActorProps {
  consistentRead: Boolean
  returnConsumedCapacity: Boolean
}
type DMovie implements DNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"findCursor\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String!
  @aws_iam @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") @sortKey(value: "{\"isSortKey\":true}")
  boolean: Boolean
  float: Float
  decimal: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  json: AWSJSON
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  @source(value: "{\"name\":\"sourceField\"}")
  dMovieActors: [DMovieActor]!
  @lookup(value: "{\"from\":\"DMovieActor\",\"localField\":\"id\",\"foreignField\":\"movieId\"}")
  id: ID!
  @partitionKey(value: "{\"isPartitionKey\":true}")
  createdAt: AWSDateTime!
  createdBy: AWSDateTime!
  updatedAt: AWSDateTime!
  updatedBy: AWSDateTime!
}
input DMovieProps {
  consistentRead: Boolean
  returnConsumedCapacity: Boolean
}
type DMovieIndex implements DNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"findCursor\"]}") {
  url: AWSURL
  name: String!
  id: ID!
  @partitionKey(value: "{\"isPartitionKey\":true}")
  createdAt: AWSDateTime!
  createdBy: AWSDateTime!
  updatedAt: AWSDateTime!
  updatedBy: AWSDateTime!
}
type DMovieActor implements DNode @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"movieActor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  movieId: ID!
  actorId: ID!
  dMovie: DMovie!
  @lookup(value: "{\"from\":\"DMovie\",\"localField\":\"movieId\",\"foreignField\":\"id\"}")
  dActor: DMovie!
  @lookup(value: "{\"from\":\"DActor\",\"localField\":\"actorId\",\"foreignField\":\"id\"}")
  id: ID!
  @partitionKey(value: "{\"isPartitionKey\":true}")
  createdAt: AWSDateTime!
  createdBy: AWSDateTime!
  updatedAt: AWSDateTime!
  updatedBy: AWSDateTime!
}
type DMovieActorEdge @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: DMovieActor
}
type DMovieActorConnection @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [DMovieActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input DMovieActorProps {
  consistentRead: Boolean
  returnConsumedCapacity: Boolean
}
type DActor implements DNode @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"actor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String!
  dMovieActors: [DMovieActor]
  @lookup(value: "{\"from\":\"DMovieActor\",\"localField\":\"id\",\"foreignField\":\"actorId\"}")
  id: ID!
  @partitionKey(value: "{\"isPartitionKey\":true}")
  createdAt: AWSDateTime!
  createdBy: AWSDateTime!
  updatedAt: AWSDateTime!
  updatedBy: AWSDateTime!
}
type DActorEdge @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: DActor
}
type DActorConnection @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [DActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input DActorProps {
  consistentRead: Boolean
  returnConsumedCapacity: Boolean
}
type PageInfoCursor @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}
type PageInfoOffset @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") {
  skip: Int!
  limit: Int!
}
input MPostFindExampleInput {
  number1: Int!
}
type MPostFindExampleOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  id: ID
  @auth(value: "{\"rules\":[{\"allow\":\"owner\",\"provider\":\"iam\"}]}")
}
type Mutation {
  mPostFindExample(input: MPostFindExampleInput!): MPostFindExampleOutput
  @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}")
  mPostQueryExample(input: MPostQueryExampleInput!): MPostQueryExampleOutput
  @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}")
}
input MPostQueryExampleTestInput {
  number1: Int!
}
input MPostQueryExampleInput {
  number1: Int!
  test: MPostQueryExampleTestInput
}
type MPostQueryExampleTestTestOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  result1: Int!
  result2: Int!
}
type MPostQueryExampleTestOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  result1: Int!
  result2: Int!
  test: MPostQueryExampleTestTestOutput
}
type MPostQueryExampleOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  id: ID
  test: MPostQueryExampleTestOutput
}

scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress

directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(cognito_groups: String) on FIELD_DEFINITION | OBJECT
directive @auth(value: AWSJSON) on FIELD_DEFINITION | OBJECT
directive @datasource(value: AWSJSON) on FIELD_DEFINITION | OBJECT
directive @lookup(value: AWSJSON) on FIELD_DEFINITION
directive @operation(value: AWSJSON) on OBJECT
directive @partitionKey(value: AWSJSON) on FIELD_DEFINITION
directive @readonly(value: AWSJSON) on FIELD_DEFINITION
directive @sortKey(value: AWSJSON) on FIELD_DEFINITION
directive @source(value: AWSJSON) on FIELD_DEFINITION | OBJECT

directive @tag(value: AWSJSON) on FIELD_DEFINITION | OBJECT