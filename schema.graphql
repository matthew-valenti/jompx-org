schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
enum AuthStrategy {
  private
  public
  owners
  groups
  custom
}
enum AuthProvider {
  apiKey
  iam
  oidc
  userPool
  function
}
enum AuthOperation {
  find
  findCursor
  findOne
  insertOne
  insertMany
  updateOne
  updateMany
  upsertOne
  upsertMany
  deleteOne
  deleteMany
}
input AuthRule {
  allow: AuthStrategy!
  provider: AuthProvider!
  ownersField: String
  ownerClaim: String
  groupsField: String
  groupClaim: String
  groups: [String]
  operations: [AuthOperation]
}
input FindCursorProps {
  consistentRead: Boolean
  returnConsumedCapacity: String
}
input FindOneProps {
  consistentRead: Boolean
  returnConsumedCapacity: String
}
input InsertOneProps {
  returnValues: String
  returnConsumedCapacity: String
}
input UpdateOneProps {
  returnValues: String
  returnConsumedCapacity: String
}
interface MNode {
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
interface DNode {
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type MMovie implements MNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"mySql\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  boolean: Boolean
  float: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  json: AWSJSON
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  @source(value: "{\"name\":\"sourceField\"}")
  mMovieActors: [MMovieActor]!
  @lookup(value: "{\"from\":\"MMovieActor\",\"localField\":\"id\",\"foreignField\":\"movieId\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MMovieEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MMovie
}
type MMovieConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MMovieEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
type Query {
  mMovieFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MMovieConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieFindOne(filter: AWSJSON props: FindOneProps): MMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MMovieActorConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieActorFindOne(filter: AWSJSON props: FindOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): MActorConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mActorFindOne(filter: AWSJSON props: FindOneProps): MActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieFindCursor(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): DMovieCursorConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key
  dMovieFindOne(filter: AWSJSON props: FindOneProps): DMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key
  dMovieIndexFindCursor(filter: AWSJSON sort: String first: Int after: String last: Int before: String props: FindCursorProps): DMovieIndexCursorConnection
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): DMovieActorConnection
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieActorFindOne(filter: AWSJSON props: FindOneProps): DMovieActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dActorFind(filter: AWSJSON sort: AWSJSON skip: Int limit: Int): DActorConnection
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dActorFindOne(filter: AWSJSON props: FindOneProps): DActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
}
input MMovieInput {
  name: String
  boolean: Boolean
  float: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  json: AWSJSON
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
}
type Mutation {
  mMovieInsertOne(insert: MMovieInput! filter: AWSJSON props: InsertOneProps): MMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieActorInsertOne(insert: MMovieActorInput! filter: AWSJSON props: InsertOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mMovieActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MMovieActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mActorInsertOne(insert: MActorInput! filter: AWSJSON props: InsertOneProps): MActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  mActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): MActor
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieInsertOne(insert: DMovieInput! filter: AWSJSON props: InsertOneProps): DMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key
  dMovieUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): DMovie
  @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key
  dMovieActorInsertOne(insert: DMovieActorInput! filter: AWSJSON props: InsertOneProps): DMovieActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dMovieActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): DMovieActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dActorInsertOne(insert: DActorInput! filter: AWSJSON props: InsertOneProps): DActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  dActorUpdateOne(filter: AWSJSON update: AWSJSON! props: UpdateOneProps): DActor
  @aws_cognito_user_pools(cognito_groups: ["admin"])
  mPostFindExample(input: MPostFindExampleInput!): MPostFindExampleOutput
  @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}")
  mPostQueryExample(input: MPostQueryExampleInput!): MPostQueryExampleOutput
  @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}")
}
type MMovieActor implements MNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"mySql\"}") @source(value: "{\"name\":\"movieActor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  movieId: ID
  actorId: ID
  mMovie: MMovie
  @lookup(value: "{\"from\":\"MMovie\",\"localField\":\"movieId\",\"foreignField\":\"id\"}")
  mActor: MActor
  @lookup(value: "{\"from\":\"MActor\",\"localField\":\"actorId\",\"foreignField\":\"id\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MMovieActorEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MMovieActor
}
type MMovieActorConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MMovieActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MMovieActorInput {
  movieId: ID
  actorId: ID
}
type MActor implements MNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"mySql\"}") @source(value: "{\"name\":\"actor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  mMovieActors: [MMovieActor]
  @lookup(value: "{\"from\":\"MMovieActor\",\"localField\":\"id\",\"foreignField\":\"actorId\"}")
  id: ID!
  @readonly(value: "{\"isReadonly\":true}")
  createdAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  createdBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedAt: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
  updatedBy: AWSDateTime!
  @readonly(value: "{\"isReadonly\":true}")
}
type MActorEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: MActor
}
type MActorConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [MActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input MActorInput {
  name: String
}
type DMovieAttributes {
  attribute1: String
  attribute2: String
  attribute3: Int
  attribute4: [String]
  attribute5: [String]
  @set(value: "{\"dataType\":\"string\"}")
}
type DMovie implements DNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]},{\"allow\":\"private\",\"provider\":\"apiKey\"}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"findCursor\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  @aws_iam @aws_api_key @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"apiKey\"}]}")
  boolean: Boolean
  float: Float
  decimal: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  @source(value: "{\"name\":\"source\"}")
  list: [String]
  attributes: DMovieAttributes
  owners: [String]
  @set(value: "{\"dataType\":\"string\"}")
  groups: [String]
  @set(value: "{\"dataType\":\"string\"}")
  dMovieActors: [DMovieActor]!
  @lookup(value: "{\"from\":\"DMovieActor\",\"localField\":\"id\",\"foreignField\":\"movieId\"}")
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieCursorEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key {
  cursor: String
  node: DMovie
}
type DMovieCursorConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @aws_api_key {
  edges: [DMovieCursorEdge]
  pageInfo: PageInfoCursor!
  totalCount: Int
}
input DMovieAttributesInput {
  attribute1: String
  attribute2: String
  attribute3: Int
  attribute4: [String]
  attribute5: [String]
}
input DMovieInput {
  name: String
  boolean: Boolean
  float: Float
  decimal: Float
  int: Int
  date: AWSDate
  dateTime: AWSDateTime
  email: AWSEmail
  ipAddress: AWSIPAddress
  phone: AWSPhone
  time: AWSTime
  timestamp: AWSTimestamp
  url: AWSURL
  sourceField: String
  list: [String]
  attributes: DMovieAttributesInput
  owners: [String]
  groups: [String]
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieIndex implements DNode @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"movie\"}") @operation(value: "{\"names\":[\"findCursor\"]}") {
  url: AWSURL
  name: String!
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieIndexCursorEdge @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  cursor: String
  node: DMovieIndex
}
type DMovieIndexCursorConnection @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [DMovieIndexCursorEdge]
  pageInfo: PageInfoCursor!
  totalCount: Int
}
type DMovieActor implements DNode @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"movieActor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  movieId: ID
  actorId: ID
  dMovie: DMovie
  @lookup(value: "{\"from\":\"DMovie\",\"localField\":\"movieId\",\"foreignField\":\"id\"}")
  dActor: DMovie
  @lookup(value: "{\"from\":\"DActor\",\"localField\":\"actorId\",\"foreignField\":\"id\"}")
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DMovieActorEdge @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: DMovieActor
}
type DMovieActorConnection @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [DMovieActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input DMovieActorInput {
  movieId: ID
  actorId: ID
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DActor implements DNode @aws_cognito_user_pools(cognito_groups: ["admin"]) @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]}]}") @datasource(value: "{\"name\":\"dynamoDb\"}") @source(value: "{\"name\":\"actor\"}") @operation(value: "{\"names\":[\"find\",\"findOne\",\"insertOne\",\"insertMany\",\"updateOne\",\"updateMany\",\"upsertOne\",\"upsertMany\",\"deleteOne\",\"deleteMany\"]}") {
  name: String
  dMovieActors: [DMovieActor]
  @lookup(value: "{\"from\":\"DMovieActor\",\"localField\":\"id\",\"foreignField\":\"actorId\"}")
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type DActorEdge @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  node: DActor
}
type DActorConnection @aws_cognito_user_pools(cognito_groups: ["admin"]) {
  edges: [DActorEdge]
  pageInfo: PageInfoOffset!
  totalCount: Int
}
input DActorInput {
  name: String
  id: ID
  createdAt: AWSDateTime
  createdBy: AWSDateTime
  updatedAt: AWSDateTime
  updatedBy: AWSDateTime
}
type PageInfoCursor @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]},{\"allow\":\"private\",\"provider\":\"apiKey\"}]}") {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}
type PageInfoOffset @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"},{\"allow\":\"private\",\"provider\":\"userPool\",\"groups\":[\"admin\"]},{\"allow\":\"private\",\"provider\":\"apiKey\"}]}") {
  skip: Int!
  limit: Int!
}
input MPostFindExampleInput {
  number1: Int!
}
type MPostFindExampleOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  id: ID
  @auth(value: "{\"rules\":[{\"allow\":\"owners\",\"provider\":\"iam\"}]}")
}
input MPostQueryExampleTestInput {
  number1: Int!
}
input MPostQueryExampleInput {
  number1: Int!
  test: MPostQueryExampleTestInput
}
type MPostQueryExampleTestTestOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  result1: Int!
  result2: Int!
}
type MPostQueryExampleTestOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  result1: Int!
  result2: Int!
  test: MPostQueryExampleTestTestOutput
}
type MPostQueryExampleOutput @auth(value: "{\"rules\":[{\"allow\":\"private\",\"provider\":\"iam\"}]}") {
  id: ID
  test: MPostQueryExampleTestOutput
}
type Subscription {
  dMovieUpdated: DMovie
  @aws_subscribe(mutations: ["dMovieUpdateOne"])
}

scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress

directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(cognito_groups: String) on FIELD_DEFINITION | OBJECT
directive @aws_api_key on FIELD_DEFINITION | OBJECT
directive @aws_oidc on FIELD_DEFINITION | OBJECT
directive @aws_lambda on FIELD_DEFINITION | OBJECT
directive @aws_lambda on FIELD_DEFINITION | OBJECT
directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION
directive @auth(value: AWSJSON) on FIELD_DEFINITION | OBJECT
directive @datasource(value: AWSJSON) on FIELD_DEFINITION | OBJECT
directive @lookup(value: AWSJSON) on FIELD_DEFINITION
directive @operation(value: AWSJSON) on OBJECT
directive @partitionKey(value: AWSJSON) on FIELD_DEFINITION
directive @readonly(value: AWSJSON) on FIELD_DEFINITION
directive @set(value: AWSJSON) on FIELD_DEFINITION
directive @sortKey(value: AWSJSON) on FIELD_DEFINITION
directive @source(value: AWSJSON) on FIELD_DEFINITION | OBJECT

directive @tag(value: AWSJSON) on FIELD_DEFINITION | OBJECT